diff --git a/ConfigureChecks.cmake b/ConfigureChecks.cmake
index 4f6752e1..cb53a11a 100644
--- a/ConfigureChecks.cmake
+++ b/ConfigureChecks.cmake
@@ -466,3 +466,8 @@ if( WITH_ELFICON )
   endif( NOT "${LIBR_VERSION}" STREQUAL "0.6.0" )
   set( HAVE_ELFICON 1 )
 endif( )
+
+# check for libtirpc
+if( BUILD_TDEIOSLAVES )
+  pkg_search_module( LIBTIRPC libtirpc )
+endif( )
diff --git a/tdeioslave/nfs/CMakeLists.txt b/tdeioslave/nfs/CMakeLists.txt
index b45824d7..edd94909 100644
--- a/tdeioslave/nfs/CMakeLists.txt
+++ b/tdeioslave/nfs/CMakeLists.txt
@@ -41,6 +41,6 @@ add_custom_command( OUTPUT nfs_prot_xdr.c
 
 tde_add_kpart( ${target} AUTOMOC
   SOURCES tdeio_nfs.cpp mount_xdr.c nfs_prot_xdr.c
-  LINK tdeio-shared
+  LINK tdeio-shared ${LIBTIRPC_LIBRARIES}
   DESTINATION ${PLUGIN_INSTALL_DIR}
 )
diff --git a/kcontrol/konsole/kcmkonsole.cpp b/kcontrol/konsole/kcmkonsole.cpp
index e2b280df..3dd8d951 100644
--- a/kcontrol/konsole/kcmkonsole.cpp
+++ b/kcontrol/konsole/kcmkonsole.cpp
@@ -110,7 +110,7 @@ void KCMKonsole::load(bool useDefaults)
     dialog->frameCB->setChecked(config.readBoolEntry("has frame",true));
     dialog->line_spacingSB->setValue(config.readUnsignedNumEntry( "LineSpacing", 0 ));
     dialog->silence_secondsSB->setValue(config.readUnsignedNumEntry( "SilenceSeconds", 10 ));
-    dialog->word_connectorLE->setText(config.readEntry("wordseps",":@-./_~"));
+    dialog->word_connectorLE->setText(config.readEntry("wordseps",":@-./_~+"));
     dialog->metaAsAltModeCB->setChecked(config.readBoolEntry("metaAsAltMode",false));
 
     dialog->SchemaEditor1->setSchema(config.readEntry("schema"));
diff --git a/konsole/konsole/TEWidget.cpp b/konsole/konsole/TEWidget.cpp
index f151044f..14ae90b3 100644
--- a/konsole/konsole/TEWidget.cpp
+++ b/konsole/konsole/TEWidget.cpp
@@ -355,7 +355,7 @@ TEWidget::TEWidget(TQWidget *parent, const char *name)
 ,preserve_line_breaks(true)
 ,column_selection_mode(false)
 ,scrollLoc(SCRNONE)
-,word_characters(":@-./_~")
+,word_characters(":@-./_~+")
 ,m_bellMode(BELLSYSTEM)
 ,blinking(false)
 ,cursorBlinking(false)
diff --git a/konsole/konsole/konsole.cpp b/konsole/konsole/konsole.cpp
index 49c24d8d..31678773 100644
--- a/konsole/konsole/konsole.cpp
+++ b/konsole/konsole/konsole.cpp
@@ -1621,7 +1621,7 @@ void Konsole::readProperties(TDEConfig* config, const TQString &schema, bool glo
      b_warnQuit=config->readBoolEntry( "WarnQuit", true );
      b_allowResize=config->readBoolEntry( "AllowResize", false);
      b_bidiEnabled = config->readBoolEntry("EnableBidi",false);
-     s_word_seps= config->readEntry("wordseps",":@-./_~");
+     s_word_seps= config->readEntry("wordseps",":@-./_~+");
      b_framevis = config->readBoolEntry("has frame",true);
      b_metaAsAlt = config->readBoolEntry("metaAsAltMode",false);
      TQPtrList<TEWidget> tes = activeTEs();
diff --git a/konsole/konsole/konsole_part.cpp b/konsole/konsole/konsole_part.cpp
index 1c0067bb..9375be81 100644
--- a/konsole/konsole/konsole_part.cpp
+++ b/konsole/konsole/konsole_part.cpp
@@ -576,7 +576,7 @@ void konsolePart::readProperties()
   n_keytab=config->readNumEntry("keytab",0); // act. the keytab for this session
   n_scroll = TQMIN(config->readUnsignedNumEntry("scrollbar",TEWidget::SCRRIGHT),2);
   m_histSize = config->readNumEntry("history",DEFAULT_HISTORY_SIZE);
-  s_word_seps= config->readEntry("wordseps",":@-./_~");
+  s_word_seps= config->readEntry("wordseps",":@-./_~+"); 
   n_encoding = config->readNumEntry("encoding",0);
 
   TQFont tmpFont = TDEGlobalSettings::fixedFont();
diff --git a/kdesktop/krootwm.cc b/kdesktop/krootwm.cc
index c14d1326..00882aa4 100644
--- a/kdesktop/krootwm.cc
+++ b/kdesktop/krootwm.cc
@@ -135,7 +135,7 @@ KRootWm::KRootWm(SaverEngine* _saver, KDesktop* _desktop) : TQObject(_desktop),
   if (kapp->authorize("run_command"))
   {
      new TDEAction(i18n("Run Command..."), "system-run", 0, TQT_TQOBJECT(m_pDesktop), TQT_SLOT( slotExecuteCommand() ), m_actionCollection, "exec" );
-     new TDEAction(i18n("Open Terminal Here..." ), "terminal", CTRL+Key_T, this, TQT_SLOT( slotOpenTerminal() ),
+     new TDEAction(i18n("Open Terminal..." ), "terminal", CTRL+Key_T, this, TQT_SLOT( slotOpenTerminal() ),
 	m_actionCollection, "open_terminal" );
   }
 
@@ -763,7 +763,7 @@ void KRootWm::slotOpenTerminal()
     TDEConfigGroupSaver gs(TDEGlobal::config(), "General");
     TQString terminal = TDEGlobal::config()->readPathEntry("TerminalApplication", "konsole");
 
-    *p << terminal << "--workdir=" + TDEGlobalSettings::desktopPath() + "/";
+    *p << terminal;
 
     p->start(TDEProcess::DontCare);
 
diff --git a/tdeioslave/media/libmediacommon/medium.cpp b/tdeioslave/media/libmediacommon/medium.cpp
index 77e32ba0..c4b7cdda 100644
--- a/tdeioslave/media/libmediacommon/medium.cpp
+++ b/tdeioslave/media/libmediacommon/medium.cpp
@@ -47,6 +47,7 @@ Medium::Medium(const TQString id, TQString uuid, const TQString name)
 	loadUserLabel();
 
 	m_halmounted = false;
+	m_isHotplug = false;
 }
 
 Medium::Medium()
@@ -71,6 +72,7 @@ Medium::Medium()
 	m_properties+= "false";        /* SOFT_HIDDEN */
 	
 	m_halmounted = false;
+	m_isHotplug = false;
 }
 
 const Medium Medium::create(const TQStringList &properties)
diff --git a/tdeioslave/media/libmediacommon/medium.h b/tdeioslave/media/libmediacommon/medium.h
index bf465fd0..2e66eaf5 100644
--- a/tdeioslave/media/libmediacommon/medium.h
+++ b/tdeioslave/media/libmediacommon/medium.h
@@ -100,6 +100,9 @@ public:
 	void setHalMounted(bool flag) const { m_halmounted = flag; }
 	bool halMounted() const { return m_halmounted; }
 
+	void setIsHotplug( bool state ) { m_isHotplug = state; }
+	bool isHotplug() const { return m_isHotplug; }
+
 //private:
 	Medium();
 
@@ -108,6 +111,8 @@ private:
 
 	TQStringList m_properties;
 	mutable bool m_halmounted;
+
+	bool m_isHotplug;
 	
 friend class TQValueListNode<const Medium>;
 };
diff --git a/tdeioslave/media/mediamanager/halbackend.cpp b/tdeioslave/media/mediamanager/halbackend.cpp
index 80d44339..d54791bf 100644
--- a/tdeioslave/media/mediamanager/halbackend.cpp
+++ b/tdeioslave/media/mediamanager/halbackend.cpp
@@ -545,6 +545,7 @@ void HALBackend::setVolumeProperties(Medium* medium)
             libhal_volume_is_mounted(halVolume) );		/* Mounted ? */
     }
 
+    medium->setIsHotplug( libhal_drive_is_hotpluggable(halDrive) );
 
     char* name = libhal_volume_policy_compute_display_name(halDrive, halVolume, m_halStoragePolicy);
     TQString volume_name = TQString::fromUtf8(name);
diff --git a/tdeioslave/media/mediamanager/halbackend.h b/tdeioslave/media/mediamanager/halbackend.h
index 8dde4558..1c1106e3 100644
--- a/tdeioslave/media/mediamanager/halbackend.h
+++ b/tdeioslave/media/mediamanager/halbackend.h
@@ -89,6 +89,8 @@ public:
 	TQString decrypt(const TQString &id, const TQString &password);
 	TQString undecrypt(const TQString &id);
 
+	static bool isHotplug( const TQString & id );
+
 private:
 	/**
 	* Append a device in the media list. This function will check if the device
diff --git a/tdeioslave/media/mediamanager/mediamanager.cpp b/tdeioslave/media/mediamanager/mediamanager.cpp
index b08c3779..d19a99cd 100644
--- a/tdeioslave/media/mediamanager/mediamanager.cpp
+++ b/tdeioslave/media/mediamanager/mediamanager.cpp
@@ -406,6 +406,57 @@ void MediaManager::slotMediumChanged(const TQString &/*id*/, const TQString &nam
     emit mediumChanged(name);
 }
 
+TQString MediaManager::unmountAllSuspend()
+{
+    TQPtrList<Medium> list = m_mediaList.list();
+
+    TQPtrList<Medium>::const_iterator it = list.begin();
+    TQPtrList<Medium>::const_iterator end = list.end();
+
+    TQString result;
+
+    for (; it!=end; ++it)
+    {
+        if ( (*it)->isMounted() && (*it)->isHotplug() )
+        {
+            TQString tmp = unmount( (*it)->id() );
+            if ( !tmp.isEmpty() ) { // umount failed
+                result = tmp;
+            } else {
+                m_suspendResumeMountList.append( (*it)->id() );
+            }
+        }
+    }
+
+    // return last error
+    return result;
+}
+
+TQString MediaManager::remountAllResume()
+{
+    TQString result;
+
+    for (TQStringList::const_iterator it = m_suspendResumeMountList.begin();
+         it != m_suspendResumeMountList.end();
+         ++it)
+    {
+        const Medium *m = m_mediaList.findById(*it);
+
+        if ( m && m->needMounting() )
+        {
+            TQString tmp = mount( *it );
+            if ( !tmp.isEmpty() ) { // mount failed
+                result = tmp;
+            }
+        }
+    }
+
+    m_suspendResumeMountList.clear();
+
+    // return last error
+    return result;
+}
+
 
 extern "C" {
     KDE_EXPORT KDEDModule *create_mediamanager(const TQCString &obj)
diff --git a/tdeioslave/media/mediamanager/mediamanager.h b/tdeioslave/media/mediamanager/mediamanager.h
index 256d11bf..7792e8a0 100644
--- a/tdeioslave/media/mediamanager/mediamanager.h
+++ b/tdeioslave/media/mediamanager/mediamanager.h
@@ -61,6 +61,20 @@ k_dcop:
 	bool removableUnplug(const TQString &devNode);
 	bool removableCamera(const TQString &devNode);
 
+       /**
+         * Unmount manually all partitions when going to suspend
+         *
+         * @return last error if any
+         */
+        TQString unmountAllSuspend();
+
+        /**
+         * Remount previously unmounted partitions in unmountAllSuspend()
+         *
+         * @return last error if any
+         */
+        TQString remountAllResume();
+
 k_dcop_signals:
 	void mediumAdded(const TQString &name, bool allowNotification);
 	void mediumRemoved(const TQString &name, bool allowNotification);
@@ -89,6 +103,7 @@ private:
 	TDEBackend *m_tdebackend;
 	MediaDirNotify m_dirNotify;
 	FstabBackend *m_fstabbackend;
+	TQStringList m_suspendResumeMountList;
 };
 
 #endif
diff --git a/tdeioslave/media/mediamanager/tdehardwarebackend.cpp b/tdeioslave/media/mediamanager/tdehardwarebackend.cpp
index b6976b68..66ccdd87 100644
--- a/tdeioslave/media/mediamanager/tdehardwarebackend.cpp
+++ b/tdeioslave/media/mediamanager/tdehardwarebackend.cpp
@@ -1035,7 +1035,19 @@ TQStringList TDEBackend::mountoptions(const TQString &name)
 	}
 
 	if (valids.contains("utf8")) {
-		value = config.readBoolEntry("utf8", true);
+		// From "man mount": only some filesystems support 'iocharset' option.
+		if( (sdevice->fileSystemName() == "fat")
+		 || (sdevice->fileSystemName() == "iso9660")
+		 || (sdevice->fileSystemName() == "jfs")
+		 || (sdevice->fileSystemName() == "msdos")
+		 || (sdevice->fileSystemName() == "ntfs")
+		 || (sdevice->fileSystemName() == "umsdos")
+		 || (sdevice->fileSystemName() == "vfat")
+		) {
+			value = config.readBoolEntry("utf8", true);
+		} else {
+			value = false;
+       }
 		tmp = TQString("utf8=%1").arg(value ? "true" : "false");
 		result << tmp;
 	}
diff --git a/kcontrol/screensaver/scrnsave.cpp b/kcontrol/screensaver/scrnsave.cpp
index a0b26ae4..da228b42 100644
--- a/kcontrol/screensaver/scrnsave.cpp
+++ b/kcontrol/screensaver/scrnsave.cpp
@@ -271,6 +271,13 @@ KScreenSaver::KScreenSaver(TQWidget *parent, const char *name, const TQStringLis
     settingsGroupLayout->addWidget(mHideActiveWindowsFromSaverCheckBox, 3, 1);
     TQWhatsThis::add( mHideActiveWindowsFromSaverCheckBox, i18n("Hide all active windows from the screen saver and use the desktop background as the screen saver input.") );
 
+    mVibrateUnlockCheckBox = new TQCheckBox( i18n("&Vibrate unlock dialog box on failure"), mSettingsGroup );
+    mVibrateUnlockCheckBox->setEnabled( true );
+    mVibrateUnlockCheckBox->setChecked( mVibrateUnlock );
+    connect( mVibrateUnlockCheckBox, TQT_SIGNAL( toggled( bool ) ), this, TQT_SLOT( slotVibrateUnlock( bool ) ) );
+    settingsGroupLayout->addWidget(mVibrateUnlockCheckBox, 4, 1);
+    TQWhatsThis::add( mVibrateUnlockCheckBox, i18n("Makes the unlock dialog box vibrate when entering an incorrect password.") );
+
     mHideCancelButtonCheckBox = new TQCheckBox( i18n("Hide &cancel button"), mSettingsGroup );
     mHideCancelButtonCheckBox->setEnabled( true );
     mHideCancelButtonCheckBox->setChecked( mHideCancelButton );
@@ -437,6 +444,7 @@ void KScreenSaver::readSettings( bool useDefaults )
     mLock = config->readBoolEntry("Lock", false);
     mDelaySaverStart = config->readBoolEntry("DelaySaverStart", true);
     mUseTSAK = config->readBoolEntry("UseTDESAK", true);
+    mVibrateUnlock = config->readBoolEntry("VibrateUnlock", true);
     mUseUnmanagedLockWindows = config->readBoolEntry("UseUnmanagedLockWindows", false);
     mHideActiveWindowsFromSaver = config->readBoolEntry("HideActiveWindowsFromSaver", true);
     mHideCancelButton = config->readBoolEntry("HideCancelButton", false);
@@ -490,6 +498,7 @@ void KScreenSaver::save()
     config->writeEntry("Lock", mLock);
     config->writeEntry("DelaySaverStart", mDelaySaverStart);
     config->writeEntry("UseTDESAK", mUseTSAK);
+    config->writeEntry("VibrateUnlock", mVibrateUnlock);
     config->writeEntry("UseUnmanagedLockWindows", mUseUnmanagedLockWindows);
     config->writeEntry("HideActiveWindowsFromSaver", mHideActiveWindowsFromSaver);
     config->writeEntry("HideCancelButton", mHideCancelButton);
@@ -718,10 +727,14 @@ void KScreenSaver::processLockouts()
         mUseTSAKCheckBox->setChecked( false );
     }
     if (!mUseUnmanagedLockWindows) {
+        mVibrateUnlockCheckBox->setEnabled( true );
+        mVibrateUnlockCheckBox->setChecked( mVibrateUnlock );
         mHideActiveWindowsFromSaverCheckBox->setEnabled( true );
         mHideActiveWindowsFromSaverCheckBox->setChecked( mHideActiveWindowsFromSaver );
     }
     else {
+        mVibrateUnlockCheckBox->setEnabled( false );
+        mVibrateUnlockCheckBox->setChecked( false );
         mHideActiveWindowsFromSaverCheckBox->setEnabled( false );
         mHideActiveWindowsFromSaverCheckBox->setChecked( false );
     }
@@ -986,6 +999,16 @@ void KScreenSaver::slotUseUnmanagedLockWindows( bool u )
     emit changed(true);
 }
 
+//---------------------------------------------------------------------------
+//
+void KScreenSaver::slotVibrateUnlock( bool u )
+{
+    if (mVibrateUnlockCheckBox->isEnabled()) mVibrateUnlock = u;
+    processLockouts();
+    mChanged = true;
+    emit changed(true);
+}
+
 //---------------------------------------------------------------------------
 //
 void KScreenSaver::slotHideActiveWindowsFromSaver( bool h )
diff --git a/kcontrol/screensaver/scrnsave.h b/kcontrol/screensaver/scrnsave.h
index d52c8122..49fcc40c 100644
--- a/kcontrol/screensaver/scrnsave.h
+++ b/kcontrol/screensaver/scrnsave.h
@@ -58,6 +58,7 @@ protected slots:
     void slotLock( bool );
     void slotDelaySaverStart( bool );
     void slotUseTSAK( bool );
+    void slotVibrateUnlock( bool );
     void slotUseUnmanagedLockWindows( bool );
     void slotHideActiveWindowsFromSaver( bool );
     void slotHideCancelButton( bool );
@@ -102,6 +103,7 @@ protected:
     TQGroupBox   *mSettingsGroup;
     TQCheckBox   *mDelaySaverStartCheckBox;
     TQCheckBox   *mUseTSAKCheckBox;
+    TQCheckBox   *mVibrateUnlockCheckBox;
     TQCheckBox   *mUseUnmanagedLockWindowsCheckBox;
     TQCheckBox   *mHideActiveWindowsFromSaverCheckBox;
     TQCheckBox   *mHideCancelButtonCheckBox;
@@ -121,6 +123,7 @@ protected:
     bool        mImmutable;
     bool        mDelaySaverStart;
     bool        mUseTSAK;
+    bool        mVibrateUnlock;
     bool        mUseUnmanagedLockWindows;
     bool        mHideActiveWindowsFromSaver;
     bool        mHideCancelButton;
diff --git a/kdesktop/lock/lockdlg.cc b/kdesktop/lock/lockdlg.cc
index 763d7bf9..c5a3ab05 100644
--- a/kdesktop/lock/lockdlg.cc
+++ b/kdesktop/lock/lockdlg.cc
@@ -55,6 +55,7 @@
 #include <X11/keysym.h>
 #include <X11/Xatom.h>
 #include <fixx11h.h>
+#include <tdeapplication.h>
 
 #ifndef AF_LOCAL
 # define AF_LOCAL	AF_UNIX
@@ -264,6 +265,11 @@ void PasswordDlg::init(GreeterPluginHandle *plugin)
         mLayoutButton->hide(); // no kxkb running
     }
     capsLocked();
+
+    TDEConfig* config = new TDEConfig("kdesktoprc");
+    config->setGroup("ScreenSaver");
+    VibrateUnlock = config->readBoolEntry("VibrateUnlock", true);
+    delete config;
 }
 
 PasswordDlg::~PasswordDlg()
@@ -323,6 +329,37 @@ void PasswordDlg::updateLabel()
     }
 }
 
+void PasswordDlg::movedialog( int _move )
+{
+     waitMoveDialog = true;
+     this->move(pos().x()+_move, pos().y());
+     TQTimer::singleShot( 50, this, TQT_SLOT(moveTimerDone()) );
+     while (waitMoveDialog) {
+          kapp->processEvents();
+     }
+}
+
+void PasswordDlg::moveTimerDone()
+{
+     waitMoveDialog = false;
+}
+
+void PasswordDlg::badPasswordLogin()
+{
+     if ( VibrateUnlock && mUnlockingFailed )
+     {
+          for ( int i = 0 ; i<2 ; i++)
+          {
+               movedialog( 10 );
+               movedialog( -20 );
+               movedialog( 20 );
+               movedialog( -20 );
+               movedialog( 20 );
+               movedialog( -10 );
+          }
+     }
+}
+
 //---------------------------------------------------------------------------
 //
 // Handle timer events.
@@ -466,6 +503,7 @@ void PasswordDlg::reapVerify()
                 ok->setEnabled(false);
                 if (cancel) cancel->setEnabled(false);
                 mNewSessButton->setEnabled( false );
+                badPasswordLogin();
                 return;
             case AuthAbort:
                 return;
diff --git a/kdesktop/lock/lockdlg.h b/kdesktop/lock/lockdlg.h
index 2ede5a4f..40363b31 100644
--- a/kdesktop/lock/lockdlg.h
+++ b/kdesktop/lock/lockdlg.h
@@ -60,6 +60,7 @@ private slots:
     void slotOK();
     void layoutClicked();
     void slotActivity();
+    void moveTimerDone();
 
 protected slots:
     virtual void reject();
@@ -79,6 +80,8 @@ private:
     void handleVerify();
     void reapVerify();
     void cantCheck();
+    void movedialog( int _move );
+    void badPasswordLogin();
     GreeterPluginHandle *mPlugin;
     KGreeterPlugin *greet;
     TQFrame      *frame;
@@ -95,6 +98,8 @@ private:
     int         sPid, sFd;
     TQListView   *lv;
     TQDateTime   m_lockStartDT;
+    bool        waitMoveDialog;
+    bool	VibrateUnlock;
 };
 
 #endif
